*tterminal.txt*     Evaluate code in a terminal (with special support for R)
                    Author: Tom Link, micathom at gmail com

The |:Tterminal| command facilitates evaluating code in a terminal.

- It start the right command (defined via run configurations aka "runconfigs") 
  for the current filetype
- It installs a map (<c-cr>) that sends the current line or selection to the 
  terminal
- For certain filetypes (e.g. R) it also supports omnicompletion (see 
  'omnifunc') via <c-x><c-o>
  NOTE: The terminal must be visible for this to work since this relies on 
  |terminal-api|.
- All buffers with the same runconfig and the same working directory (usually 
  all buffers of a project with the same 'filetype') share the same terminal

Examples: >

    " Run a terminal with the default command for the current filetype.
    " If no runconfig is defined for the current filetype, open 'shell'.
    :Tterminal

    " Run a terminal with a custom runconfig (e.g. a command with special 
    " command-line arguments)
    :Tterminal r-nosave

    " Run a terminal with custom command (if the name is no pre-configured 
    " runconfig)
    :Tterminal my-r-wrapper.sh

General maps:

<c-cr> ... Send the current line or selection to the terminal

For additional maps per filetype please see:

R -> |tterminal#runconfig#r#SetupBuffer()|


-----------------------------------------------------------------------
Install~

Either use the zip archive:

- Download the zip archive
- Extract it to `~/.vim/pack/tml/start/tterminal_vim`

or install from github:

- Start a terminal
- Change the working directory to `~/.vim/pack/tml/start/`
- Type: `git clone https://github.com/tomtom/tterminal_vim`

or use a VIM plugin manager like vim-plug, vundle, dein.vim, VAM etc.

NOTE: On Windows, ~/.vim might be ~/vimfiles. Please see 'runtimepath' 
for details.

Some features require the tlib_vim plugin to be installed:
https://github.com/tomtom/tlib_vim

Also available via git: http://github.com/tomtom/tterminal_vim


Setup~

Please configure the plugin via the following parameters:

    - |g:tterminal_autoenable_filetypes|
    - |g:tterminal#runconfigs|
    - |g:tterminal#cmd_map|


========================================================================
Contents~

        g:tterminal_autoenable_filetypes .................. |g:tterminal_autoenable_filetypes|
        g:tterminal#runconfig#r#save ...................... |g:tterminal#runconfig#r#save|
        g:tterminal#runconfig#r#restore ................... |g:tterminal#runconfig#r#restore|
        g:tterminal#runconfig#r#highlight_debug ........... |g:tterminal#runconfig#r#highlight_debug|
        g:tterminal#runconfig#r#init_code ................. |g:tterminal#runconfig#r#init_code|
        g:tterminal#runconfig#r#init_files ................ |g:tterminal#runconfig#r#init_files|
        g:tterminal#runconfig#r#handle_qfl_expression_f ... |g:tterminal#runconfig#r#handle_qfl_expression_f|
        g:tterminal#runconfig#r#use_formatR ............... |g:tterminal#runconfig#r#use_formatR|
        g:tterminal#runconfig#r#formatR_options ........... |g:tterminal#runconfig#r#formatR_options|
        tterminal#runconfig#r#Debug ....................... |tterminal#runconfig#r#Debug()|
        tterminal#runconfig#r#Undebug ..................... |tterminal#runconfig#r#Undebug()|
        tterminal#runconfig#r#SetupBuffer ................. |tterminal#runconfig#r#SetupBuffer()|


------------------------------------------------------------------------
                                                    *plugin/tterminal.vim*
                                                    *g:tterminal_autoenable_filetypes*
g:tterminal_autoenable_filetypes (default: [])
    Automatically enable tterminal (i.e. install some basic maps) for 
    these filetypes.


------------------------------------------------------------------------
                                                    *autoload/tterminal/runconfig/r.vim*
                                                    *g:tterminal#runconfig#r#save*
g:tterminal#runconfig#r#save   (default: 1)
    If true, save R sessions by default.

                                                    *g:tterminal#runconfig#r#restore*
g:tterminal#runconfig#r#restore (default: 1)
    If true, restore R sessions by default.

                                                    *g:tterminal#runconfig#r#highlight_debug*
g:tterminal#runconfig#r#highlight_debug (default: 'SpellRare')
    Highlight group for debugged functions.

                                                    *g:tterminal#runconfig#r#init_code*
g:tterminal#runconfig#r#init_code (default: '')
    Evaluate this code on startup.

                                                    *g:tterminal#runconfig#r#init_files*
g:tterminal#runconfig#r#init_files (default: [])
    Source these files on startup.

                                                    *g:tterminal#runconfig#r#handle_qfl_expression_f*
g:tterminal#runconfig#r#handle_qfl_expression_f (default: 'cgetexpr %s | cwindow')
    An ex command as format string. Defined how the results from 
    codetools:checkUsage are displayed.

                                                    *g:tterminal#runconfig#r#use_formatR*
g:tterminal#runconfig#r#use_formatR (default: 1)
    If true, format code with formatR.

                                                    *g:tterminal#runconfig#r#formatR_options*
g:tterminal#runconfig#r#formatR_options (default: '')
    Additional arguments to formatR::tidy_source().

                                                    *tterminal#runconfig#r#Debug()*
tterminal#runconfig#r#Debug(fn)
    Toggle the debug status of a function.

                                                    *tterminal#runconfig#r#Undebug()*
tterminal#runconfig#r#Undebug(fn)
    Undebug a debugged function.

                                                    *tterminal#runconfig#r#SetupBuffer()*
tterminal#runconfig#r#SetupBuffer(runconfig)
    In R terminals, the following additional maps are set (<TML> is 
    |g:tterminal#map_leader|):

    <TML>cd ... Set the working directory in R to VIM's working directory
    <TML>d  ... Debug the word under the cursor
    <TML>i  ... Inspect the word under the cursor
    <TML>k  ... Get help on the word under the cursor
    <TML>s  ... Source the current file
    <TML>s  ... Quicklist

    The following maps require codetools to be installed in R:
    <TML>cu ... Run checkUsage on the global environment

    The following maps require formatR to be installed in R:
    <TML>f{motion} ... Format some code
    <TML>f  ... In visual mode: format some code
    <TML>ff ... Format the current paragraph

    Omni completion (see 'omnifunc') is enabled.



vim:tw=78:fo=w2croql:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
